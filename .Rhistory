GeneralData <- read.csv(file.choose())
options(scipen=99)
response_col_number <- 2
reformat.df <- function(init_df, respons_col) {
# Simply setting the column name at the position provided to "y"
# Arguments:
#     init_df: The raw input data frame
#     respons_col: The 1 indexed position of the responsor column in init_df
# Returns:
#     init_df: Modified initial data frame
colnames(init_df)[respons_col] <- "y"
return(init_df) # Returns the altered dataframe
}
ReformattedDF <- reformat.df(GeneralData, response_col_number)
model_matrix <- data.frame(model.matrix(y ~ . + .*., data = ReformattedDF))
names(model_matrix) <- gsub("X\\.Intercept\\.", "Intercept", names(model_matrix))
names(model_matrix) <- gsub("\\.", ":", names(model_matrix))
y <- ReformattedDF$y
model_matrix <- cbind(model_matrix, y)
main.lm <- lm(y ~ . -1 , data = model_matrix)
summary(main.lm)
BIC_EM <- function(init.lm) {
# This is a function that computes BIC from a linear model object.
# This was heavily influenced by a variety of stackoverflow resources
resids <- init.lm$residuals
n <- nrow(init.lm$model)
n_params <- length(coef(init.lm))
model_df <- n_params+1
w <- rep(1,n)
loglike <- 0.5*(sum(log(w)) - n*(log(2*pi) + 1 - log(n) + log(sum(w*resids^2))))
bic <- -2*loglike + log(n)*model_df
return(bic)
}
BIC_EM(main.lm)-BIC(main.lm)==0
BIC_EM(main.lm)
step_pval_regress <- function(init.lm2, los) {
corrected.lm <- init.lm2
init_n_params <- length(corrected.lm$coefficients)
out_df <- data.frame(matrix(ncol = 4, nrow = 0))
# Set the maximum number of iterations
max_iters <- length(summary(corrected.lm)$coefficients[,4])
# Init a counter
iters <- 0
# Init a removed regressor var
removed_x <- ""
# Getting loopy
while(isTRUE(length(corrected.lm$coefficients) > 1)){
# Max iters check.  If at max, break the loopy loop
if (iters == max_iters){
break
} else {
iters <- iters + 1
}
# Print a new line for fun with cat.  Meow
cat("\n")
# For some weird reason, this didn't work when I called this outside the loop.
# That of course makes no sense as it is static once defined but it is 12:50 AM and I want to go to bed.
colnames(out_df) <- c("n_param", "bic", "aic", "r2adj")
p_vals <- summary(corrected.lm)$coefficients[,4]
# Get the p-vals for every regressor except the intercept
p_vals <- p_vals[2:length(p_vals)]
# Find the largest p-value.  Note that the p-value vector must be a "named" vector so that
# names(max_p_val) returns a unique string.  I believe named arrays in R behave like associative arrays/maps
# and as such, the names are unique.
max_p_val <- p_vals[which(p_vals==max(p_vals), arr.ind = TRUE)]
if (max_p_val > los){
terms_vector <- attr(corrected.lm$terms, "term.labels")
removed_x <- names(max_p_val)
new_form <- reformulate(terms_vector[terms_vector != names(max_p_val)], intercept = FALSE)
#print(new_form)
corrected.lm <- update(corrected.lm, formula = new_form)
n_params <- length(corrected.lm$coefficients)
out_df <- rbind(out_df, c(n_params, BIC_EM(corrected.lm), AIC(corrected.lm), summary(corrected.lm)$adj.r.squared))
} else {
break
}
print(sprintf("%s removed w/ p-val of %1.4f -- Remaining regressors %s of %s", removed_x, max_p_val, n_params, init_n_params))
}
out <- list(corrected.lm, out_df)
names(out) <- c("model", "fits")
return(out)
}
trimmed_model <- step_pval_regress(main.lm, .05)
summary(trimmed_model$model)
plot(as.numeric(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param)),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC")
plot(as.numeric(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param)),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
response_col_number <- 2
reformat.df <- function(init_df, respons_col) {
# Simply setting the column name at the position provided to "y"
# Arguments:
#     init_df: The raw input data frame
#     respons_col: The 1 indexed position of the responsor column in init_df
# Returns:
#     init_df: Modified initial data frame
colnames(init_df)[respons_col] <- "y"
return(init_df) # Returns the altered dataframe
}
ReformattedDF <- reformat.df(GeneralData, response_col_number)
model_matrix <- data.frame(model.matrix(y ~ . + .*., data = ReformattedDF))
names(model_matrix) <- gsub("X\\.Intercept\\.", "Intercept", names(model_matrix))
names(model_matrix) <- gsub("\\.", ":", names(model_matrix))
y <- ReformattedDF$y
model_matrix <- cbind(model_matrix, y)
main.lm <- lm(y ~ . -1 , data = model_matrix)
summary(main.lm)
BIC_EM <- function(init.lm) {
# This is a function that computes BIC from a linear model object.
# This was heavily influenced by a variety of stackoverflow resources
resids <- init.lm$residuals
n <- nrow(init.lm$model)
n_params <- length(coef(init.lm))
model_df <- n_params+1
w <- rep(1,n)
loglike <- 0.5*(sum(log(w)) - n*(log(2*pi) + 1 - log(n) + log(sum(w*resids^2))))
bic <- -2*loglike + log(n)*model_df
return(bic)
}
BIC_EM(main.lm)-BIC(main.lm)==0
BIC_EM(main.lm)
step_pval_regress <- function(init.lm2, los) {
corrected.lm <- init.lm2
init_n_params <- length(corrected.lm$coefficients)
out_df <- data.frame(matrix(ncol = 4, nrow = 0))
# Set the maximum number of iterations
max_iters <- length(summary(corrected.lm)$coefficients[,4])
# Init a counter
iters <- 0
# Init a removed regressor var
removed_x <- ""
# Getting loopy
while(isTRUE(length(corrected.lm$coefficients) > 1)){
# Max iters check.  If at max, break the loopy loop
if (iters == max_iters){
break
} else {
iters <- iters + 1
}
# Print a new line for fun with cat.  Meow
cat("\n")
# For some weird reason, this didn't work when I called this outside the loop.
# That of course makes no sense as it is static once defined but it is 12:50 AM and I want to go to bed.
colnames(out_df) <- c("n_param", "bic", "aic", "r2adj")
p_vals <- summary(corrected.lm)$coefficients[,4]
# Get the p-vals for every regressor except the intercept
p_vals <- p_vals[2:length(p_vals)]
# Find the largest p-value.  Note that the p-value vector must be a "named" vector so that
# names(max_p_val) returns a unique string.  I believe named arrays in R behave like associative arrays/maps
# and as such, the names are unique.
max_p_val <- p_vals[which(p_vals==max(p_vals), arr.ind = TRUE)]
if (max_p_val > los){
terms_vector <- attr(corrected.lm$terms, "term.labels")
removed_x <- names(max_p_val)
new_form <- reformulate(terms_vector[terms_vector != names(max_p_val)], intercept = FALSE)
#print(new_form)
corrected.lm <- update(corrected.lm, formula = new_form)
n_params <- length(corrected.lm$coefficients)
out_df <- rbind(out_df, c(n_params, BIC_EM(corrected.lm), AIC(corrected.lm), summary(corrected.lm)$adj.r.squared))
} else {
break
}
print(sprintf("%s removed w/ p-val of %1.4f -- Remaining regressors %s of %s", removed_x, max_p_val, n_params, init_n_params))
}
out <- list(corrected.lm, out_df)
names(out) <- c("model", "fits")
return(out)
}
trimmed_model <- step_pval_regress(main.lm, .05)
summary(trimmed_model$model)
trimmed_model <- step_pval_regress(main.lm, .05)
trimmed_model <- step_pval_regress(main.lm, .03)
trimmed_model <- step_pval_regress(main.lm, .01)
summary(trimmed_model$model)
plot(as.numeric(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param)),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
plot(as.numeric(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param)),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
trimmed_model <- step_pval_regress(main.lm, .01)
summary(trimmed_model$model)
plot(as.numeric(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param)),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
trimmed_model <- step_pval_regress(main.lm, .05)
summary(trimmed_model$model)
plot(as.numeric(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param)),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
plot(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
trimmed_model <- step_pval_regress(main.lm, .01)
summary(trimmed_model$model)
plot(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
trimmed_model <- step_pval_regress(main.lm, .001)
summary(trimmed_model$model)
plot(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
trimmed_model <- step_pval_regress(main.lm, .0001)
summary(trimmed_model$model)
plot(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
step_pval_regress <- function(init.lm2, los) {
corrected.lm <- init.lm2
init_n_params <- length(corrected.lm$coefficients)
out_df <- data.frame(matrix(ncol = 4, nrow = 0))
# Set the maximum number of iterations
max_iters <- length(summary(corrected.lm)$coefficients[,4])
# Init a counter
iters <- 0
# Init a removed regressor var
removed_x <- ""
# Getting loopy
while(isTRUE(length(corrected.lm$coefficients) > 1)){
# Max iters check.  If at max, break the loopy loop
if (iters == max_iters){
break
} else {
iters <- iters + 1
}
# Print a new line for fun with cat.  Meow
cat("\n")
# For some weird reason, this didn't work when I called this outside the loop.
# That of course makes no sense as it is static once defined but it is 12:50 AM and I want to go to bed.
colnames(out_df) <- c("n_param", "bic", "aic", "r2adj")
p_vals <- summary(corrected.lm)$coefficients[,4]
# Get the p-vals for every regressor except the intercept
p_vals <- p_vals[2:length(p_vals)]
# Find the largest p-value.  Note that the p-value vector must be a "named" vector so that
# names(max_p_val) returns a unique string.  I believe named arrays in R behave like associative arrays/maps
# and as such, the names are unique.
max_p_val <- p_vals[which(p_vals==max(p_vals, na.rm=TRUE), arr.ind = TRUE)]
if (max_p_val > los){
terms_vector <- attr(corrected.lm$terms, "term.labels")
removed_x <- names(max_p_ßval)
new_form <- reformulate(terms_vector[terms_vector != names(max_p_val)], intercept = FALSE)
corrected.lm <- update(corrected.lm, formula = new_form)
n_params <- length(corrected.lm$coefficients)
# Add a row to my collection data.frame with my BIC metric along with some other handy numbers
out_df <- rbind(out_df, c(n_params, BIC_EM(corrected.lm), AIC(corrected.lm), summary(corrected.lm)$adj.r.squared))
} else {
break
}
print(sprintf("%s removed w/ p-val of %1.4f -- Remaining regressors %s of %s", removed_x, max_p_val, n_params, init_n_params))
}
out <- list(corrected.lm, out_df)
names(out) <- c("model", "fits")
return(out)
}
trimmed_model <- step_pval_regress(main.lm, .05)
step_pval_regress <- function(init.lm2, los) {
corrected.lm <- init.lm2
init_n_params <- length(corrected.lm$coefficients)
out_df <- data.frame(matrix(ncol = 4, nrow = 0))
# Set the maximum number of iterations
max_iters <- length(summary(corrected.lm)$coefficients[,4])
# Init a counter
iters <- 0
# Init a removed regressor var
removed_x <- ""
# Getting loopy
while(isTRUE(length(corrected.lm$coefficients) > 1)){
# Max iters check.  If at max, break the loopy loop
if (iters == max_iters){
break
} else {
iters <- iters + 1
}
# Print a new line for fun with cat.  Meow
cat("\n")
# For some weird reason, this didn't work when I called this outside the loop.
# That of course makes no sense as it is static once defined but it is 12:50 AM and I want to go to bed.
colnames(out_df) <- c("n_param", "bic", "aic", "r2adj")
p_vals <- summary(corrected.lm)$coefficients[,4]
# Get the p-vals for every regressor except the intercept
p_vals <- p_vals[2:length(p_vals)]
# Find the largest p-value.  Note that the p-value vector must be a "named" vector so that
# names(max_p_val) returns a unique string.  I believe named arrays in R behave like associative arrays/maps
# and as such, the names are unique.
max_p_val <- p_vals[which(p_vals==max(p_vals, na.rm=TRUE), arr.ind = TRUE)]
if (max_p_val > los){
terms_vector <- attr(corrected.lm$terms, "term.labels")
removed_x <- names(max_p_val)
new_form <- reformulate(terms_vector[terms_vector != names(max_p_val)], intercept = FALSE)
corrected.lm <- update(corrected.lm, formula = new_form)
n_params <- length(corrected.lm$coefficients)
# Add a row to my collection data.frame with my BIC metric along with some other handy numbers
out_df <- rbind(out_df, c(n_params, BIC_EM(corrected.lm), AIC(corrected.lm), summary(corrected.lm)$adj.r.squared))
} else {
break
}
print(sprintf("%s removed w/ p-val of %1.4f -- Remaining regressors %s of %s", removed_x, max_p_val, n_params, init_n_params))
}
out <- list(corrected.lm, out_df)
names(out) <- c("model", "fits")
return(out)
}
trimmed_model <- step_pval_regress(main.lm, .05)
summary(trimmed_model$model)
plot(factor(trimmed_model$fits$n_param, levels = trimmed_model$fits$n_param),
trimmed_model$fits$bic,
xlab = "Number of Parameters",
ylab = "BIC",
main = "Number of Parameters vs. BIC")
setwd("~/github/eilifm/rit_missing_data")
read.csv('./sim_data.csv')
in_data <- read.csv('./sim_data.csv')
lm(Income ~ ., data = in_data)
in_data <- read.csv('./sim_data.csv')
lm(Income ~ ., data = in_data)
in_data <- read.csv('./sim_data.csv')
lm(Income ~ ., data = in_data)
in_data <- read.csv('./sim_data.csv')
lm(Income ~ ., data = in_data)
pairs(in_data)
pairs(in_data, lower.panel = NULL)
pairs(in_data[c(8, 1,2,3,4,5,6,7,9)], lower.panel = NULL)
pairs(in_data[c(7, 1,2,3,4,5,6,8)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(7, 1,2,3,4,5,6,8)], lower.panel = NULL)
lm(Income ~ ., data = in_data)
pairs(in_data[c(7, 1,2,3,4,5,6,8)], lower.panel = NULL)
pairs(in_data[c(4, 1,2,3)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(4, 1,2,3)], lower.panel = NULL)
lm(Income ~ ., data = in_data)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
model.matrix(lm(Income ~ . , data = in_data))
in_data <- read.csv('./sim_data.csv')
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
pairs(in_data[c(2, 1)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
model.matrix(lm(y ~ ., data = in_data))
lm(y ~ ., data = in_data)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(2, 1)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
in_data <- read.csv('./sim_data.csv')
pairs(in_data[c(3, 1,2)], lower.panel = NULL)
summary(lm(y ~ ., data = in_data))
mynumbers = c(12,23,34,45,56,67,78,89)
mean(mynumbers)
sd(mynumbers)
install.packages('plotrix')
summary(mynumbers)
library(pastecs)
install.packages('pastecs')
install.pacakges('tigerstats')
install.packages('plotrix')
summary(mynumbers)
library(pastecs)
stat.desc(mynumbers)
morenumbers = c(1.23,2.34,3.45,4.56,5.67,6.78,7.89,8.90)
plot(mynumbers,morenumbers,xlab = "My Numbers", ylab="More Numbers")
pnorm(23,25,2,lower.tail=TRUE)
pnorm(23,25,2,lower.tail=FALSE)
qnorm(.05,25,2,lower.tail=TRUE)
qnorm(.05,25,2,lower.tail=FALSE)
install.packages("tigerstats")
pnormGC(23, region="below", mean=25,sd=2,graph=TRUE)
library(tigerstats)
pnormGC(23, region="below", mean=25,sd=2,graph=TRUE)
pnormGC(23, region="above", mean=25,sd=2,graph=TRUE)
qnormGC(.05, region="below", mean=25,sd=2,graph=TRUE)
qnormGC(.05, region="above", mean=25,sd=2,graph=TRUE)
qnormGC(.05, region="above", mean=mean,sd=stdev,graph=TRUE)
mean = 296
stdev = 96
qnormGC(.05, region="above", mean=mean,sd=stdev,graph=TRUE)
qnormGC(.95, region="above", mean=mean,sd=stdev,graph=TRUE)
qnormGC(.95, region="above", mean=mean, sd=stdev, graph=TRUE)
qnormGC(.95, region="above", mean=mean, sd=stdev, graph=TRUE)
pnorm(23,25,2,lower.tail=FALSE)
qnorm(.05,25,2,lower.tail=TRUE)
?pnorm
pnorm(mean, stdev, 2,lower.tail=TRUE)
pnormGC(mean, stdev, 2, lower.tail=TRUE)
pnormGC(mean, stdev, region="below", lower.tail=TRUE)
?pnormGC
?qnormGC
?tigerstats
?pnorm
dnorm(420, mean, stdev, region="below", lower.tail=TRUE)
dnorm(420, mean, stdev, lower.tail=TRUE)
dnorm(420, mean=mean, sd=stdev, lower.tail=TRUE)
dnorm(420, mean=mean, sd=stdev)
qnormGC(.95, region="above", mean=mean, sd=stdev, graph=TRUE)
dnorm(420, mean=mean, sd=stdev)
1-dnorm(420, mean=mean, sd=stdev)
1-dnorm(420, mean=mean, sd=stdev)
qnormGC(.95, region="below", mean=mean, sd=stdev, graph=TRUE)
pnorm(23,25,2,lower.tail=TRUE)
pnorm(420,296, 96,lower.tail=TRUE)
1-pnorm(420,296, 96,lower.tail=TRUE)
pnorm(420,296, 96,lower.tail=TRUE)
pnorm(335.50, 296, 96,lower.tail=FALSE)
pnormGC(335.50, region="below", mean=296,sd=96,graph=TRUE)
pnormGC(335.50, region="above", mean=296,sd=96, graph=TRUE)
pnormGC(335.50, region="above", mean=296,sd=96, graph=TRUE)
qnormGC(.975, region="below", mean=mean, sd=stdev, graph=TRUE)
qnormGC(.975, region="above", mean=mean, sd=stdev, graph=TRUE)
qnormGC(.975, region="below", mean=mean, sd=stdev, graph=TRUE)
pnormGC(335.50, region="above", mean=296,sd=96, graph=TRUE)
pnormGC(335.50, region="above", mean=296,sd=96, graph=TRUE)
pnormGC(335.50, region="above", mean=296,sd=96, graph=TRUE)
pnormGC(335.50, region="below", mean=296,sd=96, graph=TRUE)
pnormGC(125.30, region="below", mean=296,sd=96, graph=TRUE)
74/pnormGC(125.30, region="below", mean=296,sd=96, graph=TRUE)
74/pnormGC(125.30, region="below", mean=298,sd=96, graph=TRUE)
